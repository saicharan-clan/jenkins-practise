pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "node-app"
        DOCKER_TAG = "latest"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/LondheShubham153/node-todo-cicd.git', branch: 'master'
            }
        }

        stage('Source Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'AUTHENTICATION_TOKEN')]) {
                    sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=non-java-project \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://44.211.238.131:9000 \
                        -Dsonar.login=$AUTHENTICATION_TOKEN
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh "docker build -t $DOCKER_IMAGE:$DOCKER_TAG ."
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB', 
                                                  usernameVariable: 'DOCKER_USERNAME', 
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                }
            }
        }

        stage('Tag and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB', 
                                                  usernameVariable: 'DOCKER_USERNAME', 
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_USERNAME/$DOCKER_IMAGE:$DOCKER_TAG
                        docker push $DOCKER_USERNAME/$DOCKER_IMAGE:$DOCKER_TAG
                    '''
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh "docker-compose down && docker-compose up -d --build"
            }
        }
    }
}
